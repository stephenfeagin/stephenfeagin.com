{
  "hash": "71e49e4e28a640272d1bbd9a99b0f72b",
  "result": {
    "markdown": "---\ntitle: \"Who is the Mightiest of the Mighty Nein?\"\ndate: 2023-09-07\nexecute:\n  message: false\n  warning: false\ncategories:\n  - r\n  - \"d&d\"\n  - tidyverse\n  - data cleaning\nimage: mighty_nein.jpg\n---\n\n\nThis is another post using data from [Crit Role Stats](https://critrolestats.com). In this post, I will be looking at the damage dealt by each member of the Mighty Nein. Spoilers for campaign 2, but that ended a couple of years ago so it seems reasonable to spoil. Now Crit Role Stats already has a [spreadsheet](https://docs.google.com/spreadsheets/d/1SSrrWbtx1i4EJBPXLSfhcbiOrWXHdd0WW7-9oGt2dm4/edit#gid=0) detailing damage dealt, and I want to recreate some of that and more. I will mostly be using the [All Rolls](https://docs.google.com/spreadsheets/d/1FFuw5c6Hk1NUlHv2Wvr5b9AElLA51KtRl9ZruPU8r9k/edit#gid=770886437) spreadsheet. I have downloaded the CSV for just the sheet that I need: [All Rolls](all_rolls_wildemount_all_episodes.csv). I will be looking back at the full spreadsheets online to verify my findings, but this is the only one that I need to pull in to work with.\n\nBy the way, my soundtrack for this post is Critical Role's own [Mighty Vibes YouTube playlist](https://www.youtube.com/playlist?list=PL1tiwbzkOjQxZ08mDmvgp3aZEeOI51PA7). It just feels right.\n\nI am interested in damage dealt by character and by episode to learn who had the highest average damage per hit and the highest average damage per episode. I expect these to differ because of the number of attacks that different characters get. Spellcasters can do a lot of damage, and many of their spells still do half damage even if the opponent successfully saves, but they rarely get more than one damage-dealing action per turn. Beauregard, as a monk, deals less damage per hit but can hit an astonishing number of times in a round, so I expect her per-hit average to be much lower than, say, Yasha's, but her average per episode may be quite a bit higher.\n\nBefore we get to that, there's a fair bit of cleaning to be done with the All Rolls table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Data Cleaning\n\nFirst, read it in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_rolls <- read_csv(\"all_rolls_wildemount_all_episodes.csv\")\nglimpse(all_rolls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15,364\nColumns: 10\n$ Episode         <chr> \"C2E001\", \"C2E001\", \"C2E001\", \"C2E001\", \"C2E001\", \"C2E…\n$ Time            <chr> \"0:35:40\", \"0:39:22\", \"0:39:30\", \"0:43:04\", \"0:50:37\",…\n$ Character       <chr> \"Fjord\", \"Jester\", \"Beau\", \"Beau\", \"Molly\", \"Molly\", \"…\n$ `Type of Roll`  <chr> \"Perception\", \"Perception\", \"Perception\", \"Insight\", \"…\n$ `Total Value`   <chr> \"Nat20\", \"22\", \"19\", \"13\", \"16\", \"16\", \"14\", \"19\", \"14…\n$ `Natural Value` <chr> \"20\", \"19\", \"16\", \"8\", \"11\", \"11\", \"14\", \"14\", \"9\", \"1…\n$ `Crit?`         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `Damage Dealt`  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `# Kills`       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ Notes           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"C…\n```\n:::\n:::\n\n\nA few things to note:\n\nFirst, we will need to clean up the `Episode` column to use as numeric. Not a big deal.\n\nSecond, there is a `Damage Dealt` column, which turns out to be very useful. Looking in the source data, we can see that it tells you the total damage dealt for a given roll. In the example of episode 43, wherein the Mighty Nein fight Avantika and her crew, Caleb uses Wall of Fire and rolls 17 damage. However, the `Damage Dealt` column tells us that he dealt a total of 101 damage when you consider all of the enemies he was able to hit. Moreover, we can also see that even in cases where there is only one target, the `Damage Dealt` column tells us whether the damage was taken in full or halved, whereas the `Total Value` column would just tell us the value of the roll. This does mean that we have a lot of parsing to do on that column because it contains a lot of free text as well, but it does seem to usually start with the actual number so that may be relatively easy. Let's hope.\n\nFirst, I will pare down the data set to only work with what we need. This isn't an enormous data frame, but saving that space will always help speed things up.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(object.size(all_rolls), units = \"MB\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.9 Mb\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- all_rolls |> \n  janitor::clean_names() |> \n  filter(type_of_roll == \"Damage\") |> \n  select(episode, character, damage_dealt)\n```\n:::\n\n\nWhat sort of space did that save?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(object.size(damage), units = \"MB\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.2 Mb\n```\n:::\n:::\n\n\nIt was still \\< 2 MB to begin with, but getting down to 0.2 MB will just make things run faster. Not a huge deal, but a nice benefit.\n\nLet's take a look at the `damage_dealt` column to see what we need to do to parse it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(damage, damage_dealt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,119 × 1\n   damage_dealt                      \n   <chr>                             \n 1 18 to Creature 1                  \n 2 11 to Creature 1                  \n 3 9 Cold to Creature 1              \n 4 11 to Creature 1                  \n 5 9 (8 + 1 Cold) to Creature 1      \n 6 3 Necrotic to Creature 1          \n 7 12 to Creature 2                  \n 8 13 to Creature 1                  \n 9 17 (12 + 5 Necrotic) to Creature 2\n10 14 (10 + 4 SA) to Creature 2      \n# ℹ 2,109 more rows\n```\n:::\n:::\n\n\nLet's first look to see if every row begins with a number. I'll use `stringr::str_match()` to pull out the leading numbers. If any entries begin with non-numeric values, the result will be `NA`. I can then see if there are any `NA`s in the resulting vector to see if there will be a problem with just pulling out the initial digits.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatches <- str_match(damage$damage_dealt, \"^\\\\d+\")\nanyNA(matches)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nOk, so there are `NA`s. How many?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(matches))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50\n```\n:::\n:::\n\n\n50 is a lot but not insurmountable. Where are they?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage[is.na(matches), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 3\n   episode character damage_dealt                \n   <chr>   <chr>     <chr>                       \n 1 C2E010  Nott      Unknown to Rat 5            \n 2 C2E013  Molly     Unknown to Molly            \n 3 C2E013  Molly     Unknown to Shadow Assassin 3\n 4 C2E018  Molly     <NA>                        \n 5 C2E019  Molly     <NA>                        \n 6 C2E019  Molly     Unknown to Molly            \n 7 2-20    Fjord     <NA>                        \n 8 2-20    Fjord     <NA>                        \n 9 2-22    Fjord     <NA>                        \n10 2-23    Molly     <NA>                        \n# ℹ 40 more rows\n```\n:::\n:::\n\n\nThere are a lot of Unknowns and a lot of `NA`s. Looking at a few of these in the original table, I can see that some of them show \"Disregarded\" in the notes. Others are Molly's own Blood Maledicts, which damage him but he doesn't always announce the result. What this tells me is that I need to re-read the `damage` data frame, this time including `Notes` from the original `all_rolls` data. I can look for \"Disregarded\" and \"Blood Curse\" in the notes and omit them, because they shouldn't count toward the total number of hits. After I do that, I can re-run the above code to find non-matches and see where things stand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- all_rolls |> \n  janitor::clean_names() |> \n  filter(type_of_roll == \"Damage\") |> \n  select(episode, character, damage_dealt, notes)\n\ndamage |> \n  filter(notes != \"Disregarded\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 624 × 4\n   episode character damage_dealt              notes                            \n   <chr>   <chr>     <chr>                     <chr>                            \n 1 C2E001  Jester    3 Necrotic to Creature 1  Toll the Dead                    \n 2 C2E001  Beau      13 to Creature 2          HDYWTDT                          \n 3 C2E003  Molly     3 to Molly                Blood Curse of the Eyeless (ampl…\n 4 C2E003  Nott      2 to Zombie 2             Sneak Attack                     \n 5 C2E003  Molly     1 to Molly                Rite of the Frozen               \n 6 C2E003  Molly     4 Psychic to Imp 1        Vicious Mockery                  \n 7 C2E003  Fjord     14 to Kylre               HDYWTDT                          \n 8 C2E003  Jester    6 to Imp 1                Word of Radiance                 \n 9 C2E005  Molly     3 Psychic to Witherling 1 Vicious Mockery                  \n10 C2E005  Jester    9 Cold to Witherling 4    Hellish Rebuke                   \n# ℹ 614 more rows\n```\n:::\n:::\n\n\nWait, that just dropped a ton of rows. We've gone from 2119 to 624. Turns out that what's happening is that all of the `NA` values are getting dropped in addition to those notes that are \"Disregarded\" so we're losing a ton of data. I need to create a way to eliminate the \"Disregarded\" rows but still keep the `NA` rows, because having no note is pretty much the norm, so we don't want to drop those. I do this by passing a logical vector to `filter()` even though the vector isn't exactly a conditional in the format of `<column> <operator> <value>`. Instead, I'm using `dplyr::if_else()` to check equality against \"Disregarded\" but to also accommodate `NA` values. To do that, I use the argument `missing = TRUE` to tell `if_else()` that I want `NA` values to be included in the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- damage |>\n  filter(\n    if_else(\n      !str_detect(tolower(notes), \"disregard\"),\n      true = TRUE,\n      false = FALSE,\n      missing = TRUE\n    )\n  )\n```\n:::\n\n\nNext, I need to remove the rows that start with \"blood curse.\" I will again use `if_else()` to account for the many `NA` values in `notes`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- damage |> \n  filter(\n    if_else(\n      !str_starts(tolower(notes), \"blood\"),\n      true = TRUE,\n      false = FALSE,\n      missing = TRUE\n    )\n  )\n```\n:::\n\n\nSo let's repeat the search for those `NA`s and unknowns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatches <- str_match(damage$damage_dealt, \"^\\\\d+\")\nsum(is.na(matches))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n\n```{.r .cell-code}\ndamage[is.na(matches), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 33 × 4\n   episode character damage_dealt                 notes                         \n   <chr>   <chr>     <chr>                        <chr>                         \n 1 C2E010  Nott      Unknown to Rat 5             HDYWTDT                       \n 2 C2E013  Molly     Unknown to Shadow Assassin 3 Dissipates                    \n 3 2-28    Nott      <NA>                         <NA>                          \n 4 C2E035  Beau      <NA>                         <NA>                          \n 5 C2E035  Caduceus  <NA>                         <NA>                          \n 6 C2E035  Jester    <NA>                         <NA>                          \n 7 C2E039  Beau      <NA>                         <NA>                          \n 8 C2E044  Caduceus  <NA>                         Prayer of Healing, Caleb, Bea…\n 9 C2E044  Fjord     <NA>                         <NA>                          \n10 C2E047  Beau      <NA>                         <NA>                          \n# ℹ 23 more rows\n```\n:::\n:::\n\n\nThe rest of these are judgment calls. Some of them are cases where there was clearly some damage, such as in episode 10 when Nott gets a \"How do you want to do this?\" against a rat, but it doesn't say the damage done. I would imagine that the rat had something like 1HP left and any attack would kill it, so Sam didn't even have to roll. One is a healing roll which should have been omitted to begin with. Some of them are by pseudo-NPCs that a few players are controlling, and those should be omitted. In other cases, I've looked back to the original `all_rolls` table and found that there are values in the `total value` column. Because of that, I'm going to re-read the data (yet again), and include the natural roll and total value columns for use in my manual cleaning. Because there's no easy way to code through every judgment, I'm going to write out the current data to a .csv, hand-clean these remaining rows, and re-read it back in. In instances where it was clear there was some damage, I'm just going to assign a value of 1. In cases that should be disregarded, I am going to delete the row. In cases where `damage_dealt` is `NA` but there is a `total_value` or a `natural_value`, I will populate `damage_dealt` with the higher of those two values. I hate to edit data files by hand but this situation calls for it, and it's low stakes so I'm not that worried about it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_rolls |> \n  janitor::clean_names() |> \n  filter(type_of_roll == \"Damage\") |> \n  select(episode, character, total_value, natural_value, damage_dealt, notes) |>\n  filter(\n    if_else(\n      !str_detect(tolower(notes), \"disregard\"),\n      true = TRUE,\n      false = FALSE,\n      missing = TRUE\n    )\n  ) |> \n  filter(\n    if_else(\n      !str_starts(tolower(notes), \"blood\"),\n      true = TRUE,\n      false = FALSE,\n      missing = TRUE\n    )\n  ) |> \n  write_csv(file = \"damage.csv\")\n```\n:::\n\n\nEdit, edit, edit. Clean, clean, clean.\n\nReimport:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- read_csv(\"damage_cleaned.csv\")\n```\n:::\n\n\nLet's check if all of the `damage_dealt` values start with a number now:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatches <- str_match(damage$damage_dealt, \"^\\\\d+\")\nsum(is.na(matches))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\ndamage[is.na(matches), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 7\n# ℹ 7 variables: episode <chr>, character <chr>, total_value <chr>,\n#   natural_value <chr>, damage_dealt <chr>, notes <chr>, ...7 <chr>\n```\n:::\n:::\n\n\nWe're good!\n\nNow I will once again pull out just the `episode`, `character`, and `damage_dealt` columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- damage |> \n  select(episode, character, damage_dealt)\n```\n:::\n\n\nNow I can extract that numeric value from the `damage_dealt` column and convert the whole thing to numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- damage |>\n  mutate(damage_dealt = parse_number(str_extract(damage_dealt, \"^\\\\d+\")))\n```\n:::\n\n\nWe need to pull out the episode numbers to clean that up:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- damage |> \n  mutate(episode = parse_number(str_extract(episode, \"\\\\d+$\")))\n```\n:::\n\n\nNow we can start doing some analysis!\n\n## Most Total Damage\n\nWho has done the most total damage?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  group_by(character) |> \n  summarize(total_damage = sum(damage_dealt)) |> \n  arrange(desc(total_damage))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 2\n   character total_damage\n   <chr>            <dbl>\n 1 Beau              5922\n 2 Fjord             5069\n 3 Yasha             4741\n 4 Caleb             3638\n 5 Nott              3636\n 6 Jester            3465\n 7 Veth              1854\n 8 Caduceus          1732\n 9 Molly              641\n10 Keg                203\n# ℹ 12 more rows\n```\n:::\n:::\n\n\nOops! I still have some non-core characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage <- damage |> \n  filter(character %in% c(\n    \"Beau\",\n    \"Caduceus\",\n    \"Caleb\",\n    \"Fjord\",\n    \"Jester\",\n    \"Molly\",\n    \"Veth\",\n    \"Yasha\"\n  ))\n\ndamage |> \n  group_by(character) |> \n  summarize(total_damage = sum(damage_dealt)) |> \n  arrange(desc(total_damage))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  character total_damage\n  <chr>            <dbl>\n1 Beau              5922\n2 Fjord             5069\n3 Yasha             4741\n4 Caleb             3638\n5 Jester            3465\n6 Veth              1854\n7 Caduceus          1732\n8 Molly              641\n```\n:::\n:::\n\n\nMany of these numbers are pretty close to what Crit Role Stats themselves calculated -- I calculate Veth's total damage at 5490 and they have it at 5583, so pretty close. But some are quite different -- I calculate Caleb's damage at just 3638 but they have him at 5281, a big difference. I really can't explain what's going on here, and would love some external validation for why some findings are so different. Most are pretty close so that's what I'm going with. In another post I could work on reading in data from their Damage Dealt spreadsheet and parsing that within R, but that's not today. So, sorry Caleb, you're getting the shaft here.\n\n## Episode High\n\nWhat episode had the most damage dealt?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  group_by(episode) |> \n  summarize(total_damage = sum(damage_dealt)) |> \n  slice_max(n = 1, order_by = total_damage)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  episode total_damage\n    <dbl>        <dbl>\n1      98          849\n```\n:::\n:::\n\n\nEpisode 98 features a big fight on the deck of the *Balleater* and ends with a dead Fjord and Orly. Big episode, good fight, makes sense that it would have the most damage. This doesn't totally agree with what Crit Role Stats has, but it's in the same ballpark.\n\n## Damage Over Time\n\nHow does damage dealt increase over time?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  group_by(episode) |> \n  summarize(total_damage = sum(damage_dealt)) |> \n  ggplot(aes(x = episode, y = total_damage)) +\n  geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nIt's kind of all over the place, to be honest. There are ups and downs, which is to be expected with the various arcs, and the highs tend to be higher later in the campaign, but it's not a terribly clear trend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  group_by(episode) |> \n  summarize(total_damage = sum(damage_dealt)) |> \n  ggplot(aes(x = episode, y = total_damage)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nIt's clearly a positive slope, but not terribly strong. That's interesting to me.\n\n## Average Damage by Character\n\nWe've already seen that Beau dealt the most total damage. But who dealt the most damage per hit? Per episode?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  group_by(character) |> \n  summarize(avg_damage = mean(damage_dealt)) |> \n  arrange(desc(avg_damage))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  character avg_damage\n  <chr>          <dbl>\n1 Veth           29.0 \n2 Caleb          20.6 \n3 Yasha          20.2 \n4 Caduceus       15.9 \n5 Jester         15.8 \n6 Fjord          15.5 \n7 Beau           10.5 \n8 Molly           8.43\n```\n:::\n:::\n\n\nIt's interesting, but not entirely unsurprising, that Caleb has the highest average damage. His spells can hit multiple targets, sometimes with very high damage for each one, and that all gets counted together. Yasha being close to the top is unsurprising, since she's a barbarian and her whole role is to hit things hard. It's also unsurprising that Beau, the overall champ, is nearly last. Monks don't hit very hard, they just hit a lot. And poor Mollymauk didn't get a chance to level up enough to do really hard hitting.\n\nWho has the highest per-episode average?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  summarize(episode_total = sum(damage_dealt), .by = c(character, episode)) |> \n  summarize(episode_average = mean(episode_total), .by = character) |> \n  arrange(desc(episode_average))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  character episode_average\n  <chr>               <dbl>\n1 Veth                 88.3\n2 Yasha                76.5\n3 Beau                 69.7\n4 Fjord                64.2\n5 Jester               55  \n6 Caleb                52.7\n7 Molly                37.7\n8 Caduceus             35.3\n```\n:::\n:::\n\n\nNo real surprises here, but it's interesting that Yasha edges out Beau when we look at episode total damage.\n\n## Characters' Hardest Hits\n\nWhere did each of the characters most shine? First, I'll look at which episode had the most damage for each player.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  group_by(character, episode) |> \n  summarize(total_damage = sum(damage_dealt)) |> \n  slice_max(n = 1, order_by = total_damage)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n# Groups:   character [8]\n  character episode total_damage\n  <chr>       <dbl>        <dbl>\n1 Beau          140          210\n2 Caduceus       98          122\n3 Caleb          43          297\n4 Fjord          82          243\n5 Jester         82          209\n6 Molly          26           98\n7 Veth          139          239\n8 Yasha          39          300\n```\n:::\n:::\n\n\nBeau and Veth both have their best episodes in the final arc, fighting through Cognouza, and Caduceus has his on the bloodiest episode of the series, 98. Caleb's comes in the Bad Guys arc, facing Avantika in Darktow. Fjord and Jester both hit their high water marks in episode 82, in the depths of the Happy Fun Ball. Molly does the most damage, sadly, in the episode in which he dies. Lastly, Yasha hits a whopping 300 damage (just beating out Caleb for the highest single episode damage) in the Temple of the False Serpent, walloping a hydra.\n\nNext, I will look at the single hardest hits for each character.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndamage |> \n  group_by(character) |> \n  slice_max(order_by = damage_dealt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n# Groups:   character [8]\n  episode character damage_dealt\n    <dbl> <chr>            <dbl>\n1     133 Beau                55\n2      73 Caduceus            42\n3      43 Caleb              172\n4     123 Fjord              106\n5     119 Jester             106\n6      23 Molly               21\n7     139 Veth               100\n8     138 Yasha               78\n```\n:::\n:::\n\n\n-   Beau hits for 55 points using an Intuit charge against the Tomb Takers. Makes sense that this was with a device, I don't know how she could possibly do that much with a single hit.\n-   Caduceus does 42 necrotic damage on a Remorhaz using the blight spell\n-   Caleb gets his 172 damage from a big fireball in episode 43, which I've mentioned before. Worth noting that this hit 10 separate targets.\n-   Fjord and Jester tie with 106 damage. Fjord gets his in episode 123, fighting Gelidon, a massive white dragon. The spreadsheet doesn't give me any details, unfortunately.\n-   Jester gets her hit in on episode 119, hitting two Aeorian Abominations for 53 damage each. Again, sadly no details.\n-   Poor Molly yet again bringing up the rear at 21 points, with a big hit on a troll\n-   Veth has one of the final arc episodes as her highest, hitting for 100 points against Lucien. I don't have details other than `100 (50x2)` so I'm not sure exactly what happened there.\n-   Yasha has her all-time high on the episode prior, and surprisingly low damage for her hardest hit.\n\n## Conclusion\n\nThis has been an interesting exercise. The data cleaning portion had some challenges but it gave me the chance to work with the stringr package and exercise some very basic regex skills. I learned that even with careful coding, I couldn't get things to line up 100% with Crit Role Stats, which is a valuable lesson. And I learned that while Beau dealt the most damage over time, it's Caleb who can pack the single hardest punch. And it's no surprise that he does so with fire.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}