{
  "hash": "7b8380a527b1290b9b03aaee67637a17",
  "result": {
    "markdown": "---\ntitle: Rescaling Variables with R\ndate: 2016-10-05\nstatus: published\ntags: [r, data cleaning]\n---\n\n\nIn doing some RA work, I've needed to rescale or normalize different variables. Working with survey data, it can be very\ndifficult to compare ordinal results across questions. Say for instance that we want to get the correlation of perceived\neconomic status and perceived social status. The [Latinobar&oacute;metro](http://www.latinobarometro.org/lat.jsp) survey\nasks the first question with a scale from 0 to 10. The second item, though, is reported on a five-point scale.\nMoreover, modeling becomes much easier and more intuitive when we have a simple scale that runs from 0 to 1.\n\nI have also needed to rescale variables from -1 to 1. In particular, using the left-right political spectrum is\ndifficult when it's scaled 0 to 10. Converting it to \\[-1, 1\\] puts the very liberal response at -1, the very\nconservative response at 1, and the middle at 0. It works much more intuitively, which can be very helpful when\nexploring and modeling data.\n\nIn other situations, the ordering of two different variables runs in different directions than desired. For instance, in\na question asking how fair the previous election was, the survey responses range from 1 (very fair) to 5 (very unfair).\nIf we want to look at the correlation of that question with the item asking \"How democratic is your country?\", we want\nthe responses to move in the same direction. That is, we should expect a positive correlation between perceived fairness\nof the election and perceived democracy in a country. So we need to invert the scaling for the fairness question. This\nmainly matters because of the phrasing of the question. If it were asked \"How unfair was the last election?\", we would\nexpect high values to indicate greater unfairness. But since the question asked about how fair it was, we intuitively\nwant the responses to range from 0 (unfair) to 5 (fair).\n\nI've written a handful of functions that help out with these tasks. They're nothing groundbreaking, but I've used them\nover and over again in this type of work. Below is the code. Hope it comes in handy for someone!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The arguments min and max refer to the hypothetical minimum and maximum of the initial\n# scaling, not the minimum and maximum values in vector x, which are just given as \n# defaults.\n\nrescale_01 <- function(x, min, max){\n  # Normalizes a vector to [0,1]\n  (x - min) / (max - min)\n}\n\nrescale_negative <- function(x, min, max){\n  # Normalizes a vector to [-1, 1]\n  (((x - min) / (max - min)) - 0.5) * 2\n}\n\ninvert <- function(x, max){\n  # Inverts the scaling (i.e. the max value becomes the min -- reverses the direction)\n  max + 1 - x\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}