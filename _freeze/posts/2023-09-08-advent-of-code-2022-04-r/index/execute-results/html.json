{
  "hash": "41a939d853d96e418c457be82180c792",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code: 2022 Day 3 in R\"\ndate: 2023-09-08\ncategories:\n  - r\n  - advent of code\n  - puzzle\n---\n\n\n## Day 4: Camp Cleanup\n\n> Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\n>\n> However, as some of the Elves compare their section assignments with each other, they've noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).\n>\n> For example, consider the following list of section assignment pairs:\n>\n\n```\n2-4,6-8\n2-3,4-5\n5-7,7-9\n2-8,3-7\n6-6,4-6\n2-6,4-8\n```\n\n>For the first few pairs, this list means:\n>\n> - Within the first pair of Elves, the first Elf was assigned sections 2-4 (sections 2, 3, and 4), while the second Elf was assigned sections 6-8 (sections 6, 7, 8).\n> - The Elves in the second pair were each assigned two sections.\n> - The Elves in the third pair were each assigned three sections: one got sections 5, 6, and 7, while the other also got 7, plus 8 and 9.\n>\n> This example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:\n\n```\n.234.....  2-4\n.....678.  6-8\n\n.23......  2-3\n...45....  4-5\n\n....567..  5-7\n......789  7-9\n\n.2345678.  2-8\n..34567..  3-7\n\n.....6...  6-6\n...456...  4-6\n\n.23456...  2-6\n...45678.  4-8\n```\n\n> Some of the pairs have noticed that one of their assignments fully contains the other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.\n\n## Part 1\n\n> In how many assignment pairs does one range fully contain the other?\n\nI will warn you that this post will show exactly how I'm exploring the problem and all the intermediate steps -- it's not a polished report on the end product. The first challenge here is reading in the data in a way that makes it useful to us. We can first get the lines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- readLines(\"test_input.txt\")\ntest_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2-4,6-8\" \"2-3,4-5\" \"5-7,7-9\" \"2-8,3-7\" \"6-6,4-6\" \"2-6,4-8\"\n```\n:::\n:::\n\n\nNext, we need to split out each line into the two Elves.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelf_list <- strsplit(test_data, \",\")\nelf_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"2-4\" \"6-8\"\n\n[[2]]\n[1] \"2-3\" \"4-5\"\n\n[[3]]\n[1] \"5-7\" \"7-9\"\n\n[[4]]\n[1] \"2-8\" \"3-7\"\n\n[[5]]\n[1] \"6-6\" \"4-6\"\n\n[[6]]\n[1] \"2-6\" \"4-8\"\n```\n:::\n:::\n\nWe can further get each elf's range by splitting up the strings again. Here we have a list where each item in the list is a list of two 2-item vectors, each representing the start and end of each area for each elf.\n\n::: {.cell}\n\n```{.r .cell-code}\nelf_list_ranges <- lapply(elf_list, strsplit, split = \"-\")\nelf_list_ranges\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[[1]][[1]]\n[1] \"2\" \"4\"\n\n[[1]][[2]]\n[1] \"6\" \"8\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"2\" \"3\"\n\n[[2]][[2]]\n[1] \"4\" \"5\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"5\" \"7\"\n\n[[3]][[2]]\n[1] \"7\" \"9\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"2\" \"8\"\n\n[[4]][[2]]\n[1] \"3\" \"7\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"6\" \"6\"\n\n[[5]][[2]]\n[1] \"4\" \"6\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"2\" \"6\"\n\n[[6]][[2]]\n[1] \"4\" \"8\"\n```\n:::\n:::\n\nAt this point I might switch over to manually iterating. I'm going to pull out just one pair for now to play around with.\n\n::: {.cell}\n\n```{.r .cell-code}\npair <- elf_list_ranges[[1]]\nfor (range in pair) {\n  print(readr::parse_number(range))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4\n[1] 6 8\n```\n:::\n:::\n\nNow I need to convert that into sequences covering those points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npair_ranges <- vector(\"list\", 2)\nfor (i in seq_along(pair)) {\n  range_numeric <- readr::parse_number(pair[[i]])\n  area_range <- seq(range_numeric[1], range_numeric[2])\n  pair_ranges[[i]] <- area_range\n}\npair_ranges\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 2 3 4\n\n[[2]]\n[1] 6 7 8\n```\n:::\n:::\n\nOk, that looks promising. Now I just have to check whether either range completely includes the other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall(pair_ranges[[1]] %in% pair_ranges[[2]]) || all(pair_ranges[[2]] %in% pair_ranges[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\nNot bad. Now I have to put that all together and iterate over the list of lists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_character_list <- function(input_data) {\n  strsplit(input_data, \",\") |> \n    lapply(strsplit, split = \"-\")\n}\ncharacter_list <- get_character_list(test_data)\ncharacter_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[[1]][[1]]\n[1] \"2\" \"4\"\n\n[[1]][[2]]\n[1] \"6\" \"8\"\n\n\n[[2]]\n[[2]][[1]]\n[1] \"2\" \"3\"\n\n[[2]][[2]]\n[1] \"4\" \"5\"\n\n\n[[3]]\n[[3]][[1]]\n[1] \"5\" \"7\"\n\n[[3]][[2]]\n[1] \"7\" \"9\"\n\n\n[[4]]\n[[4]][[1]]\n[1] \"2\" \"8\"\n\n[[4]][[2]]\n[1] \"3\" \"7\"\n\n\n[[5]]\n[[5]][[1]]\n[1] \"6\" \"6\"\n\n[[5]][[2]]\n[1] \"4\" \"6\"\n\n\n[[6]]\n[[6]][[1]]\n[1] \"2\" \"6\"\n\n[[6]][[2]]\n[1] \"4\" \"8\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_area_ranges <- function(character_list) {\n  all_pairs <- vector(\"list\", length(character_list)) # <1>\n  for (i in seq_along(character_list)) { # <2>\n    pair_ranges <- vector(\"list\", 2) # <3>\n    for (j in 1:2) {  # <4>\n      endpoints <- readr::parse_number(character_list[[i]][[j]]) # <5>\n      area <- seq(from = endpoints[1], to = endpoints[2]) # <6>\n      pair_ranges[[j]] <- area # <6>\n    }\n    all_pairs[[i]] <- pair_ranges # <7>\n  }\n  all_pairs\n}\narea_ranges <- get_area_ranges(character_list)\n```\n:::\n\n1. Initialize an empty list to hold the results\n2. Iterate over the pairs of elves\n3. Initialize a list to contain each pair's ranges\n4. I know there are only 2 vectors in each list, one for each elf, so I can hardcode `1:2`\n5. Turn the character strings into numeric values\n6. Generate the sequence and populate the `pair_ranges` list\n7. Populate the `all_pairs` list\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_ranges\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[[1]][[1]]\n[1] 2 3 4\n\n[[1]][[2]]\n[1] 6 7 8\n\n\n[[2]]\n[[2]][[1]]\n[1] 2 3\n\n[[2]][[2]]\n[1] 4 5\n\n\n[[3]]\n[[3]][[1]]\n[1] 5 6 7\n\n[[3]][[2]]\n[1] 7 8 9\n\n\n[[4]]\n[[4]][[1]]\n[1] 2 3 4 5 6 7 8\n\n[[4]][[2]]\n[1] 3 4 5 6 7\n\n\n[[5]]\n[[5]][[1]]\n[1] 6\n\n[[5]][[2]]\n[1] 4 5 6\n\n\n[[6]]\n[[6]][[1]]\n[1] 2 3 4 5 6\n\n[[6]][[2]]\n[1] 4 5 6 7 8\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_overlap <- function(ranges) {\n  all(ranges[[1]] %in% ranges[[2]]) || all(ranges[[2]] %in% ranges[[1]])\n}\nsapply(area_ranges, check_overlap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\nNow to put it all together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_1 <- function(input_data) {\n  input_data |> \n    get_character_list() |> \n    get_area_ranges() |> \n    sapply(check_overlap) |> \n    sum()\n}\npart_1(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nNow to try it on the real thing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreal_data <- readLines(\"input.txt\")\npart_1(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 494\n```\n:::\n:::\n\nThat's the right answer! One gold star!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}