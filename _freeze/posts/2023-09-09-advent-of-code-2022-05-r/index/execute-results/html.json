{
  "hash": "4c8d60f70709861631484c96c12b4c8c",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code: 2022 Day 5 in R\"\ndate: 2023-09-03\ncategories:\n  - r\n  - advent of code\n  - puzzle\nexecute: \n  message: false\n  warning: false\ndraft: true\n---\n\n\n## Day 5: Supply Stacks\n\n> The expedition can depart as soon as the final supplies have been unloaded from the ships. Supplies are stored in stacks of marked crates, but because the needed supplies are buried under many other crates, the crates need to be rearranged.\n>\n> The ship has a giant cargo crane capable of moving crates between stacks. To ensure none of the crates get crushed or fall over, the crane operator will rearrange them in a series of carefully-planned steps. After the crates are rearranged, the desired crates will be at the top of each stack.\n>\n> The Elves don't want to interrupt the crane operator during this delicate procedure, but they forgot to ask her which crate will end up where, and they want to be ready to unload them as soon as possible so they can embark.\n>\n> They do, however, have a drawing of the starting stacks of crates and the rearrangement procedure (your puzzle input). For example:\n\n```\n    [D]    \n[N] [C]    \n[Z] [M] [P]\n 1   2   3 \n\nmove 1 from 2 to 1\nmove 3 from 1 to 3\nmove 2 from 2 to 1\nmove 1 from 1 to 2\n```\n\n> In this example, there are three stacks of crates. Stack 1 contains two crates: crate Z is on the bottom, and crate N is on top. Stack 2 contains three crates; from bottom to top, they are crates M, C, and D. Finally, stack 3 contains a single crate, P.\n>\n> Then, the rearrangement procedure is given. In each step of the procedure, a quantity of crates is moved from one stack to a different stack. In the first step of the above rearrangement procedure, one crate is moved from stack 2 to stack 1, resulting in this configuration:\n\n```\n[D]        \n[N] [C]    \n[Z] [M] [P]\n 1   2   3 \n```\n\n> In the second step, three crates are moved from stack 1 to stack 3. Crates are moved one at a time, so the first crate to be moved (D) ends up below the second and third crates:\n\n```\n        [Z]\n        [N]\n    [C] [D]\n    [M] [P]\n 1   2   3\n```\n\n> Then, both crates are moved from stack 2 to stack 1. Again, because crates are moved one at a time, crate C ends up below crate M:\n\n```\n        [Z]\n        [N]\n[M]     [D]\n[C]     [P]\n 1   2   3\n```\n\n> Finally, one crate is moved from stack 1 to stack 2:\n\n```\n        [Z]\n        [N]\n        [D]\n[C] [M] [P]\n 1   2   3\n```\n\n## Part 1\n\n> The Elves just need to know which crate will end up on top of each stack; in this example, the top crates are C in stack 1, M in stack 2, and Z in stack 3, so you should combine these together and give the Elves the message CMZ.\n>\n> After the rearrangement procedure completes, what crate ends up on top of each stack?\n\nWell this will be much more challenging than the previous few puzzles. We need to read the visual representation of the different stacks into a usable data format, and then we need to parse the instructions. \n\nI know I'm going to need at least some of the tidyverse packages, so I'll load the whole thing now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nLink to [test_input.txt](test_input.txt) and the real [input.txt](input.txt).\n\nFirst I'll just read in the raw file as is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- readLines(\"test_input.txt\")\ntest_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"    [D]    \"        \"[N] [C]    \"        \"[Z] [M] [P]\"       \n[4] \" 1   2   3 \"        \"\"                   \"move 1 from 2 to 1\"\n[7] \"move 3 from 1 to 3\" \"move 2 from 2 to 1\" \"move 1 from 1 to 2\"\n```\n:::\n:::\n\n\n### Parsing Crates\n\nI want to keep all of the lines that represent crates. I think I can disregard the line with the stack numbers because it won't be easy to make that line up as far as R is concerned. I slice up to the line where the string is `\"\"` and subtract 2 -- one for that line and one for the line of stack numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrates <- test_data[1:(which(test_data == \"\") - 2)]\ncrates\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"    [D]    \" \"[N] [C]    \" \"[Z] [M] [P]\"\n```\n:::\n:::\n\n\nI can now \"read\" that vector as if it's a fixed width file. I first open a `textConnection()`, use `read.fwf()` on that connection, then close the connection. I use column widths of 4, to get the three characters in `[D]` as well as a trailing space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnection <- textConnection(crates)\ncrates <- read.fwf(\n  connection, \n  widths = rep(4, 3), \n  strip.white = TRUE, \n  na.strings = \"\"\n  )\nclose(connection)\n```\n:::\n\n\nThat's something I can work with! Next I'm going to feed those stacks into vectors in a list, removing `NA`s and reversing order so that the first element in the list is the bottom of the stack.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstacks <- vector(\"list\", ncol(crates))\nfor (i in seq_along(stacks)) {\n  stacks[[i]] <- rev(crates[[i]])\n  stacks[[i]] <- stacks[[i]][!is.na(stacks[[i]])]\n}\nstacks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"[Z]\" \"[N]\"\n\n[[2]]\n[1] \"[M]\" \"[C]\" \"[D]\"\n\n[[3]]\n[1] \"[P]\"\n```\n:::\n:::\n\nTo translate: We had stack 1 having two crates: `N` on top and `Z` on bottom. We now have a list element that is a vector of `c(\"[Z]\", \"[N]\")`, representing `Z` first as being in the bottom position. That way, I know that no matter how many crates are in any given stack, the first element is the bottom, the last element is the top, and `length()` is the number of crates.\n\nNext I'm just going to clean up by removing the brackets from the crate labels. Notice that I have to escape the brackets themselves because brackets are part of regular expressions to denote a set of characters to be included. But because of the raw character syntax available since R 4.0.0, I can use `r\"{}\"` and avoid having to double-escape everything.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_along(stacks)) {\n  stacks[[i]] <- str_remove_all(stacks[[i]], r\"{[\\[\\]]}\")\n}\nstacks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Z\" \"N\"\n\n[[2]]\n[1] \"M\" \"C\" \"D\"\n\n[[3]]\n[1] \"P\"\n```\n:::\n:::\n\n\n### Parsing Instructions\n\nNow it's time to read in the instructions from the file. We still have the `test_data` object that includes the full text of the input. I can now read it starting after the line that's just the empty string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstructions_vector <- test_data[(which(test_data == \"\") + 1):length(test_data)]\ninstructions_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"move 1 from 2 to 1\" \"move 3 from 1 to 3\" \"move 2 from 2 to 1\"\n[4] \"move 1 from 1 to 2\"\n```\n:::\n:::\n\nI can make this into a data frame with columns `number`, `from`, and `to` by pulling out the numbers from each line. The regular expression I use indicates that I want to \"capture\" the first one or more digits that appear, then skip whatever comes next until the next set of digits, and then repeat for a third set of digits, which I expect to be the end of the string. So in total I'm pulling out three sets of digits, represented by the three `(\\d+)` elements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatches <- str_match(instructions_vector, r\"{(\\d+).*(\\d+).*(\\d+)$}\")\nmatches\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]            [,2] [,3] [,4]\n[1,] \"1 from 2 to 1\" \"1\"  \"2\"  \"1\" \n[2,] \"3 from 1 to 3\" \"3\"  \"1\"  \"3\" \n[3,] \"2 from 2 to 1\" \"2\"  \"2\"  \"1\" \n[4,] \"1 from 1 to 2\" \"1\"  \"1\"  \"2\" \n```\n:::\n:::\n\n\nThe first column of `matches` is the full string, and each column thereafter has the captured group. Now I'll turn it into a data frame by converting those strings into numeric, converting to tibble, and renaming the variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstructions <- \n  apply(matches[, -1], MARGIN = 2, FUN = as.numeric) |> \n  as_tibble() |> \n  rename(number = V1, from = V2, to = V3) \ninstructions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 3\n  number  from    to\n   <dbl> <dbl> <dbl>\n1      1     2     1\n2      3     1     3\n3      2     2     1\n4      1     1     2\n```\n:::\n:::\n\n\n### Executing Instructions\n\nI'll start with just the first row of instructions: `move 1 from 2 to 1`. We expect to end up with stack 1 being `c(\"Z\", \"N\", \"D\")` and stack 2 being `c(\"M\", \"C\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmove <- function(stacks, number, from, to) {\n  for (i in seq_len(number)) {\n    stacks[[to]] <- c(stacks[[to]], stacks[[from]][length(stacks[[from]])]) # <1>\n    stacks[[from]] <- stacks[[from]][-length(stacks[[from]])] # <2>\n  }\n  stacks\n}\n```\n:::\n\n1. The stacks vector where the crates are moving to becomes the vector concatenated with the final element in the stacks vector where the crates are coming from.\n2. The stacks vector where the crates are coming from gets reassigned to that vector minus the element at `length(vector)` -- the final element.\n\nIterating over the instruction set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexecute_instructions <- function(stacks, instructions) {\n  for (i in seq_len(nrow(instructions))) {\n    stacks <- move(stacks, instructions$number[i], instructions$from[i], instructions$to[i])\n  }\n  stacks\n}\n\nexecute_instructions(stacks, instructions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"C\"\n\n[[2]]\n[1] \"M\"\n\n[[3]]\n[1] \"P\" \"D\" \"N\" \"Z\"\n```\n:::\n:::\n\n\nThat looks like the example!\n\nNow we just have to read off the crate letters on top of each stack.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_crate_labels <- function(stacks) {\n  labels <- character(length(stacks))\n  for (i in seq_along(stacks)) {\n    labels[i] <- stacks[[i]][length(stacks[[i]])]\n  }\n  paste(labels, collapse = \"\")\n}\n\nread_crate_labels(execute_instructions(stacks, instructions))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CMZ\"\n```\n:::\n:::\n\n\n### Putting It All Together\n\nLet's put it all together into a clean function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_stacks <- function(input_data, num_stacks) {\n  crates <- input_data[1:(which(input_data == \"\") - 2)]\n  connection <- textConnection(crates)\n  crates <- read.fwf(connection, widths = rep(4, num_stacks), strip.white = TRUE, na.strings = \"\")\n  close(connection)\n  stacks <- vector(\"list\", ncol(crates))\n  for (i in seq_along(stacks)) {\n    stacks[[i]] <- rev(crates[[i]])\n    stacks[[i]] <- stacks[[i]][!is.na(stacks[[i]])]\n    stacks[[i]] <- str_remove_all(stacks[[i]], r\"([\\[\\]])\")\n  }\n\n  stacks\n}\n\nparse_instructions <- function(input_data) {\n  instructions_vector <- input_data[(which(input_data == \"\") + 1):length(input_data)]\n  number_matches <- str_match(instructions_vector, r\"((\\d+).*(\\d+).*(\\d+)$)\")\n  instructions <- \n    apply(number_matches[, -1], MARGIN = 2, FUN = as.numeric) |> \n    as_tibble() |> \n    rename(number = V1, from = V2, to = V3) \n  \n  instructions\n}\n\npart_1 <- function(input_data, num_stacks) {\n  stacks <- parse_stacks(input_data, num_stacks)\n  instructions <- parse_instructions(input_data)\n  stacks <- execute_instructions(stacks, instructions)\n  \n  read_crate_labels(stacks)\n}\n```\n:::\n\n\nOn the test data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- readLines(\"test_input.txt\")\npart_1(test_data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CMZ\"\n```\n:::\n:::\n\n\nThat looks like what we want! Now let's try it on the real data. I have looked at the input file and know that it has 9 stacks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreal_data <- readLines(\"input.txt\")\npart_1(real_data, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ZWHVFWQWW\"\n```\n:::\n:::\n\n\nAnother gold star! This was a tricky one. Let's see what part 2 has in store.\n\n## Part 2\n\n> As you watch the crane operator expertly rearrange the crates, you notice the process isn't following your prediction.\n>\n> Some mud was covering the writing on the side of the crane, and you quickly wipe it away. The crane isn't a CrateMover 9000 - it's a CrateMover 9001.\n>\n> The CrateMover 9001 is notable for many new and exciting features: air conditioning, leather seats, an extra cup holder, and the ability to pick up and move multiple crates at once.\n>\n> Again considering the example above, the crates begin in the same configuration:\n\n```\n    [D]    \n[N] [C]    \n[Z] [M] [P]\n 1   2   3 \n```\n\n>Moving a single crate from stack 2 to stack 1 behaves the same as before:\n\n```\n[D]        \n[N] [C]    \n[Z] [M] [P]\n 1   2   3 \n```\n\n> However, the action of moving three crates from stack 1 to stack 3 means that those three moved crates stay in the same order, resulting in this new configuration:\n\n```\n        [D]\n        [N]\n    [C] [Z]\n    [M] [P]\n 1   2   3\n```\n\n> Next, as both crates are moved from stack 2 to stack 1, they retain their order as well:\n\n```\n        [D]\n        [N]\n[C]     [Z]\n[M]     [P]\n 1   2   3\n```\n\n> Finally, a single crate is still moved from stack 1 to stack 2, but now it's crate C that gets moved:\n\n```\n        [D]\n        [N]\n        [Z]\n[M] [C] [P]\n 1   2   3\n```\n\n> In this example, the CrateMover 9001 has put the crates in a totally different order: `MCD`.\n>\n> Before the rearrangement process finishes, update your simulation so that the Elves know where they should stand to be ready to unload the final supplies. After the rearrangement procedure completes, what crate ends up on top of each stack?\n\nWe'll still need to get the crates and instructions out of the input data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- readLines(\"test_input.txt\")\nstacks <- parse_stacks(test_data, 3)\ninstructions <- parse_instructions(test_data)\n```\n:::\n\n\nThis time, we need to change the `move()` and `execute_instructions()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmove_2 <- function(stacks, number, from, to) {\n  len_from <- length(stacks[[from]])  # <1>\n  moving <- stacks[[from]][(len_from - (number - 1)) : len_from] # <2>\n  stacks[[to]] <- c( # <3>\n    stacks[[to]],    # <3>\n    moving           # <3>\n  )                  # <3>\n  stacks[[to]] <- stacks[[to]][!is.na(stacks[[to]])] # <4>\n  if (number == len_from) { # <5>\n    stacks[[from]] <- NA    # <5>\n  } else {\n    stacks[[from]] <- stacks[[from]][1:(len_from - number)] # <6>\n  }\n\n  stacks\n}\n```\n:::\n\n1. I make a placeholder variable for the length of the `from` stacks just to save typing and visual clarity\n2. I make a vector holding the elements that will be moved\n3. The new `to` stacks will be a concatenation of the old stack and the vector of crates being moved.\n4. If there was an `NA` in the `to` stack (i.e. if it had been empty prior to this move), remove the `NA`\n5. If I'm moving the entire stack, I need to \"save its place\" with an `NA`. Otherwise, assigning it just `c()` will actually delete that element from the `stacks` list.\n6. Otherwise, lop off the `number` of items from the `from` stack\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 1\nstacks_1 <- move(stacks, instructions$number[i], instructions$from[i], instructions$to[i])\nstacks_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Z\" \"N\" \"D\"\n\n[[2]]\n[1] \"M\" \"C\"\n\n[[3]]\n[1] \"P\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 2\nstacks_2 <- move(stacks_1, instructions$number[i], instructions$from[i], instructions$to[i])\nstacks_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\ncharacter(0)\n\n[[2]]\n[1] \"M\" \"C\"\n\n[[3]]\n[1] \"P\" \"D\" \"N\" \"Z\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 3\nstacks_3 <- move(stacks_2, instructions$number[i], instructions$from[i], instructions$to[i])\nstacks_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"C\" \"M\"\n\n[[2]]\ncharacter(0)\n\n[[3]]\n[1] \"P\" \"D\" \"N\" \"Z\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 4\nstacks_4 <- move(stacks_3, instructions$number[i], instructions$from[i], instructions$to[i])\nstacks_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"C\"\n\n[[2]]\n[1] \"M\"\n\n[[3]]\n[1] \"P\" \"D\" \"N\" \"Z\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexecute_instructions_2 <- function(stacks, instructions) {\n  for (i in seq_len(nrow(instructions))) {\n    stacks <- move_2(\n      stacks,\n      instructions$number[i],\n      instructions$from[i],\n      instructions$to[i]\n    )\n  }\n  \n  stacks\n}\n\nstacks_final <- execute_instructions(stacks, instructions)\nread_crate_labels(stacks_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CMZ\"\n```\n:::\n:::\n\n\nI had a lot of troubleshooting because I mixed up the order of arguments to `move()` in the `execute_instructions()` function, but I won't belabor the point. We got the right answer for the example. Now to put it all together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2 <- function(input_data, num_stacks) {\n  stacks <- parse_stacks(input_data, num_stacks)\n  instructions <- parse_instructions(input_data)\n  stacks <- execute_instructions_2(stacks, instructions)\n  \n  read_crate_labels(stacks)\n}\n\npart_2(test_data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MCD\"\n```\n:::\n:::\n\n\nReal data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2(real_data, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"HZFZCCWWV\"\n```\n:::\n:::\n\n\nCorrect! This one was tough, but I really enjoyed it.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}