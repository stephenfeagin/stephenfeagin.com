{
  "hash": "0fc0dc956efb2ce45f5b5f505236983b",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code: 2022 Day 1 in R\"\ndate: 2023-09-07\ncategories:\n  - r\n  - advent of code\n  - puzzle\n---\n\n\nBelow is my solution for Advent of Code 2022 day 1 in R.\n\n## The Brief\n\n> Santa's reindeer typically eat regular reindeer food, but they need a lot of magical energy to deliver presents on Christmas. For that, their favorite snack is a special type of star fruit that only grows deep in the jungle. The Elves have brought you on their annual expedition to the grove where the fruit grows.\n>\n> To supply enough magical energy, the expedition needs to retrieve a minimum of fifty stars by December 25th. Although the Elves assure you that the grove has plenty of fruit, you decide to grab any fruit you see along the way, just in case.\n>\n> Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n>\n> The jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves' expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\n>\n>The Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they've brought with them, one item per line. Each Elf separates their own inventory from the previous Elf's inventory (if any) by a blank line.\n>\n> For example, suppose the Elves finish writing their items' Calories and end up with the following list:\n\n```\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\n```\n\n> This list represents the Calories of the food carried by five Elves:\n> - The first Elf is carrying food with `1000`, `2000`, and `3000` Calories, a total of `6000` Calories.\n> - The second Elf is carrying one food item with `4000` Calories.\n> - The third Elf is carrying food with `5000` and `6000` Calories, a total of `11000` Calories.\n> - The fourth Elf is carrying food with `7000`, `8000`, and `9000` Calories, a total of `24000` Calories.\n> - The fifth Elf is carrying one food item with `10000` Calories.\n\n## Part 1\n\n> In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they'd like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is `24000` (carried by the fourth Elf).\n>\n> Find the Elf carrying the most calories. How many total Calories is that Elf carrying?\n\n### Read Input\n\nThe first part of any Advent of Code puzzle is reading in the input file. I always copy the example input given to use as a test case. That's [test_input.txt](test_input.txt). I have also copied my actual puzzle input into [input.txt](input.txt).\n\nIn this case, we need to read the lines of the input file and find a way to work with the data structure in R. Just reading in the data is very easy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_input <- function(file) {\n  as.numeric(readLines(file))\n}\n```\n:::\n\n\nThat will give us a numeric vector where each line in the file is an element in the vector, and the empty lines that separate the elves will be `NA`. This will actually make it pretty easy to iterate through because we can use `is.na()` to determine when we're moving to a new Elf.\n\n### Solve\n\nThe solution is relatively straightforward. We keep a running total of Calories for each Elf, then when we get to the end of that Elf's values we check to see if that Elf's total is higher than the highest we've yet seen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_1 <- function(input_data) {\n  highest_total <- 0 # <1>\n  running_total <- 0 # <1>\n  for (i in input_data) { # <2>\n    if (is.na(i)) { # <3>\n      if (running_total > highest_total) { # <3>\n        highest_total <- running_total # <3>\n      } # <3>\n      running_total <- 0 # <4>\n      next # <5>\n    }\n    running_total <- running_total + i # <6>\n  }\n  if (running_total > highest_total) { # <7>\n    highest_total <- running_total # <7>\n  }\n  highest_total\n}\n```\n:::\n\n1. Initialize variables to use in the loop\n2. Iterate over each element in `input_data`\n3. If `is.na(i)` we know that we've reached the end of the Elf's values, so we can check the running total against the highest total that we've seen\n4. Re-set the `running_total` variable to 0 so that we can start clean with the next Elf\n5. We use `next` to move onto the next iteration of the loop so that we don't try to do calculations on `NA` \n6. If `!is.na(i)` then we just add the current element to the running total\n7. Finally, we know that checking `is.na(i)` will not capture the elements for the last Elf in the input. So after the loop, we check one last time if `running_total > highest_total`, just to check for that last Elf.\n\nWe need to run this with the example data to make sure we come up with 24,000:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- read_input(\"test_input.txt\")\npart_1(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24000\n```\n:::\n:::\n\n\nSuccess! Now we try it on the real data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreal_data <- read_input(\"input.txt\")\npart_1(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 71924\n```\n:::\n:::\n\n\nAdvent of Code tells me that's correct!\n\n## Part 2\n\n> By the time you calculate the answer to the Elves' question, they've already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\n> \n> To avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\n>\n> In the example above, the top three Elves are the fourth Elf (with `24000` Calories), then the third Elf (with `11000` Calories), then the fifth Elf (with `10000` Calories). The sum of the Calories carried by these three elves is `45000.`\n>\n> Find the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n### Solve\n\nThis one is a bit trickier because we need to keep track of all of the Elves' totals and take the top three once we've counted them all up. We can use the same input data as before and we don't need to mess with the function to read it in. What I will do now, instead of keeping track of the single highest total, is just populate a vector with all of the totals, sort it, and then take the three highest values. I can figure out the size of vector that I need by getting the number of `NA`s and adding one -- there is an `NA` between every Elf, but none after the last one, so that has to be added on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2 <- function(input_data) {\n  elf_totals <- numeric(sum(is.na(input_data)) + 1) # <1> \n  \n  current_elf <- 1 # <2>\n  running_total <- 0 # <2>\n  for (i in seq_along(input_data)) { # <3>\n    if (i == length(input_data)) { # <4>\n      running_total <- running_total + input_data[i] # <4>\n      elf_totals[current_elf] <- running_total # <4>\n    } # <4>\n    if (is.na(input_data[i])) { # <5>\n      elf_totals[current_elf] <- running_total # <5>\n      running_total <- 0 # <5>\n      current_elf <- current_elf + 1 # <5>\n      next # <5>\n    } # <5>\n    running_total <- running_total + input_data[i] # <6>\n  }\n  sum(sort(elf_totals, decreasing = TRUE)[1:3]) # <7>\n}\n```\n:::\n\n1. Pre-allocate the vector that will contain the Elves' totals\n2. Initialize variables\n3. Iterate through the input data\n4. If we're at the end of the data, we need to update the `running_total` and tack that onto `elf_totals`. We have to do this check separately from the `is.na()` check because the data ends with the last Elve's last snack, not `NA`. In retrospect, I could've potentially simplified the code by adding `NA` to the end of the input data vector, but checking manually for the end of the vector isn't particularly hard or confusing, so I just stick with that.\n5. If the current value of the vector is `NA`, we need to populate the `elf_totals` vector with the `running_total` that we've been adding up. We then reset `running_total` to 0 and increment the `current_elf` count, before continuing in the loop.\n6. Add the current value in the data vector onto the `running_total`\n7. Finally, we sort the `elf_totals` vector, specifying `decreasing = TRUE`, take the first three elements, and then return the sum.\n\nChecking this on the example data, making sure it returns 45,000:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 45000\n```\n:::\n:::\n\n\nGood! And now the real data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 210406\n```\n:::\n:::\n\n\nWhich Advent of Code tells me is correct.\n\nSo that's all there is to it! Happy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}