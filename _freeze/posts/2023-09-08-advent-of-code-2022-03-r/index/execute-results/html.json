{
  "hash": "da3a0c50be816bdbee1e90935c759cdf",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code: 2022 Day 3 in R\"\ndate: 2023-09-08\ncategories:\n  - r\n  - advent of code\n  - puzzle\n---\n\n\n## Day 3: Rucksack Reorganization\n\n> One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn't quite follow the packing instructions, and so a few items now need to be rearranged.\n>\n> Each rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\n>\n> The Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, a and A refer to different types of items).\n> \n> The list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.\n>\n> For example, suppose you have the following list of contents from six rucksacks:\n\n```\nvJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw\n```\n\n> - The first rucksack contains the items `vJrwpWtwJgWrhcsFMMfFFhFp`, which means its first compartment contains the items `vJrwpWtwJgWr`, while the second compartment contains the items `hcsFMMfFFhFp.` The only item type that appears in both compartments is lowercase `p`.\n> - The second rucksack's compartments contain `jqHRNqRjqzjGDLGL` and `rsFMfFZSrLrFZsSL.` The only item type that appears in both compartments is uppercase `L`.\n> - The third rucksack's compartments contain `PmmdzqPrV` and `vPwwTWBwg`; the only common item type is uppercase `P`.\n> - The fourth rucksack's compartments only share item type `v`.\n> - The fifth rucksack's compartments only share item type `t`.\n> - The sixth rucksack's compartments only share item type `s`.\n>\n> To help prioritize item rearrangement, every item type can be converted to a priority:\n> - Lowercase item types a through z have priorities 1 through 26.\n> - Uppercase item types A through Z have priorities 27 through 52.\n>\n> In the above example, the priority of the item type that appears in both compartments of each rucksack is `16` (`p`), `38` (`L`), `42` (`P`), `22` (`v`), `20` (`t`), and `19` (`s`); the sum of these is `157.`\n\n## Part 1\n\n> Find the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types?\n\nThis one is simple to read in:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_input <- function(file) {\n  readLines(file)\n}\n```\n:::\n\n\n\nUnfortunately for me, R is not the friendliest language for string manipulation, but I think this will be straightforward enough. Whereas a language like Python is able to treat a multi-character string as a list and iterate through it with ease, in R each string is an atomic vector that cannot be subdivided further. So we need to explicitly split the string before we operate on it.\n\nI'll first be working with the test data first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- read_input(\"test_input.txt\")\nrucksack_list <- strsplit(test_data, \"\")\n```\n:::\n\n\nWe now have a list where each element is a vector of individual characters from each element in `test_data`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrucksack_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"v\" \"J\" \"r\" \"w\" \"p\" \"W\" \"t\" \"w\" \"J\" \"g\" \"W\" \"r\" \"h\" \"c\" \"s\" \"F\" \"M\" \"M\" \"f\"\n[20] \"F\" \"F\" \"h\" \"F\" \"p\"\n\n[[2]]\n [1] \"j\" \"q\" \"H\" \"R\" \"N\" \"q\" \"R\" \"j\" \"q\" \"z\" \"j\" \"G\" \"D\" \"L\" \"G\" \"L\" \"r\" \"s\" \"F\"\n[20] \"M\" \"f\" \"F\" \"Z\" \"S\" \"r\" \"L\" \"r\" \"F\" \"Z\" \"s\" \"S\" \"L\"\n\n[[3]]\n [1] \"P\" \"m\" \"m\" \"d\" \"z\" \"q\" \"P\" \"r\" \"V\" \"v\" \"P\" \"w\" \"w\" \"T\" \"W\" \"B\" \"w\" \"g\"\n\n[[4]]\n [1] \"w\" \"M\" \"q\" \"v\" \"L\" \"M\" \"Z\" \"H\" \"h\" \"H\" \"M\" \"v\" \"w\" \"L\" \"H\" \"j\" \"b\" \"v\" \"c\"\n[20] \"j\" \"n\" \"n\" \"S\" \"B\" \"n\" \"v\" \"T\" \"Q\" \"F\" \"n\"\n\n[[5]]\n [1] \"t\" \"t\" \"g\" \"J\" \"t\" \"R\" \"G\" \"J\" \"Q\" \"c\" \"t\" \"T\" \"Z\" \"t\" \"Z\" \"T\"\n\n[[6]]\n [1] \"C\" \"r\" \"Z\" \"s\" \"J\" \"s\" \"P\" \"P\" \"Z\" \"s\" \"G\" \"z\" \"w\" \"w\" \"s\" \"L\" \"w\" \"L\" \"m\"\n[20] \"p\" \"w\" \"M\" \"D\" \"w\"\n```\n:::\n:::\n\nThe first thing we need to do is divide each rucksack into its two halves. To start with, I'm going to pull out the first rucksack and work only with that so that I can get the puzzle logic down before applying it to the entire list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrucksack <- rucksack_list[[1]]\n```\n:::\n\n\nNow the two halves:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_1 <- rucksack[1:(length(rucksack) / 2)]\nhalf_2 <- rucksack[(length(rucksack) / 2 + 1):length(rucksack)]\n```\n:::\n\n\nNext, I can get the `intersect()` of each element to find the overlap:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintersect(half_1, half_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"p\"\n```\n:::\n:::\n\n\nLowercase `p` is correct. Now I just need to code that process up to apply it to each element in `rucksack_list`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshared_items <- character(length(rucksack_list))\nfor (i in seq_along(rucksack_list)) {\n  half_1 <- rucksack_list[[i]][1:(length(rucksack_list[[i]]) / 2)]\n  half_2 <- rucksack_list[[i]][\n      (length(rucksack_list[[i]]) / 2 + 1):length(rucksack_list[[i]])\n    ]\n  shared_items[i] <- intersect(half_1, half_2)\n}\n```\n:::\n\n\nThat's the hardest part. Now just to calculate the priorities. I make a vector that combines the lower case letters and the uppercase letters, then I can get the priority value using `which()` to pull out the position of any given letter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_priority <- function(letter) {\n  priorities <- c(letters, LETTERS)\n  which(priorities == letter)\n}\n\nsum(sapply(shared_items, get_priority))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 157\n```\n:::\n:::\n\n\nWhich is the correct answer for the example.\n\nNow I'll rewrite this as clean, clear functions to use for the real input. I already have `get_priority()` so I don't need to rewrite that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_shared_item <- function(sack) {\n  half_1 <- sack[1:(length(sack) / 2)]\n  half_2 <- sack[(length(sack) / 2 + 1):length(sack)]\n  intersect(half_1, half_2)\n}\n\npart_1 <- function(input_data) {\n  rucksack_list <- strsplit(input_data, \"\")\n  shared_items <- sapply(rucksack_list, get_shared_item)\n  priorities <- sapply(shared_items, get_priority)\n  sum(priorities)\n}\n```\n:::\n\n\nThis could also be written with the native R pipe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_1_pipe <- function(input_data) {\n  input_data |> \n    strsplit(\"\") |> \n    sapply(get_shared_item) |> \n    sapply(get_priority) |> \n    sum()\n}\n```\n:::\n\n\n\nNow to try it out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreal_data <- read_input(\"input.txt\")\npart_1(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7691\n```\n:::\n\n```{.r .cell-code}\npart_1_pipe(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7691\n```\n:::\n:::\n\n\nThat's the right answer, and both versions of the function agree!\n\n## Part 2\n\n> As you finish identifying the misplaced items, the Elves come to you with another issue.\n>\n> For safety, the Elves are divided into groups of three. Every Elf carries a badge that identifies their group. For efficiency, within each group of three Elves, the badge is the only item type carried by all three Elves. That is, if a group's badge is item type B, then all three Elves will have item type B somewhere in their rucksack, and at most two of the Elves will be carrying any other item type.\n>\n> The problem is that someone forgot to put this year's updated authenticity sticker on the badges. All of the badges need to be pulled out of the rucksacks so the new authenticity stickers can be attached.\n>\n> Additionally, nobody wrote down which item type corresponds to each group's badges. The only way to tell which item type is the right one is by finding the one item type that is common between all three Elves in each group.\n>\n> Every set of three lines in your list corresponds to a single group, but each group can have a different badge item type. So, in the above example, the first group's rucksacks are the first three lines:\n\n```\nvJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\n```\n\n>And the second group's rucksacks are the next three lines:\n\n```\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw\n```\n\n> In the first group, the only item type that appears in all three rucksacks is lowercase `r`; this must be their badges. In the second group, their badge item type must be `Z`.\n>\n> Priorities for these items must still be found to organize the sticker attachment efforts: here, they are 18 (`r`) for the first group and 52 (`Z`) for the second group. The sum of these is 70.\n>\n> Find the item type that corresponds to the badges of each three-Elf group. What is the sum of the priorities of those item types?\n\nThe biggest challenge here is to group the elves in their teams of three. After that, it's mostly a repeat of the previous example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_teams <- function(input_data) {\n  elf_teams <- vector(\"list\", length = length(input_data) / 3) # <1>\n  i <- 1 # <2>\n  while (i <= length(input_data)) { # <2>\n    elf_teams[[ceiling(i / 3)]] <- input_data[i:(i+2)] # <3>\n    i <- i + 3 # <4>\n  }\n  elf_teams\n}\n```\n:::\n\n1. Whenever possible, it's best to construct a list or vector of the appropriate size and populate it, rather than appending onto the end of a list or vector. It's much more memory efficient, and \"vector growing\" can actually crash your program if you do it enough times, like in a very long loop.\n2. Initialize a counter variable and start a `while` loop\n3. I use `[ceiling(i  / 3)]` to find the next appropriate element of `elf_teams` to populate. For `i` in `1:3`, the value is `1`, for `i` in `4:6`, the value is `2`, etc. Doing this means I don't have to nest loops to iterate over both `elf_teams` and `input_data`.\n4. Increase `i` by 3 each time so we skip forward to the start of the next team\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_teams(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"vJrwpWtwJgWrhcsFMMfFFhFp\"         \"jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\"\n[3] \"PmmdzqPrVvPwwTWBwg\"              \n\n[[2]]\n[1] \"wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\" \"ttgJtRGJQctTZtZT\"              \n[3] \"CrZsJsPPZsGzwwsLwLmpwMDw\"      \n```\n:::\n:::\n\n\nNext, I create a function to find the badge, which is just a small rewrite of `get_shared_item()`. I combine that function with `strsplit()` just to compress things a bit. I do have to nest `intersect()` because it only operates on two vectors.\n\n::: {.cell}\n\n```{.r .cell-code}\nget_badge <- function(team) {\n  elves <- strsplit(team, \"\")\n  intersect(\n    intersect(elves[[1]], elves[[2]]),\n    elves[[3]]\n  )\n}\n```\n:::\n\n\nNow I put it together with `get_priority()` to solve the whole thing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2 <- function(input_data) {\n  teams <- get_teams(input_data)\n  badges <- sapply(teams, get_badge)\n  priorities <- sapply(badges, get_priority)\n  sum(priorities)\n}\n```\n:::\n\n\nAgain rewriting with the pipe, just for illustration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2_pipe <- function(input_data) {\n  input_data |> \n    get_teams() |> \n    sapply(get_badge) |> \n    sapply(get_priority) |> \n    sum()\n}\n```\n:::\n\n\n\nLet's try it on the test data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 70\n```\n:::\n\n```{.r .cell-code}\npart_2_pipe(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 70\n```\n:::\n:::\n\n\nThat's right! Now to try on the real data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2508\n```\n:::\n:::\n\n\nBeautiful! Another successful AoC puzzle!\n\nYou can find all of my Advent of Code solutions on [GitHub](https://github.com/stephenfeagin/adventofcode).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}