{
  "hash": "f1e564931e3c888ec0d3b967156e8095",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code: 2022 Day 2 in R\"\ndate: 2023-09-07\ncategories:\n  - r\n  - advent of code\n  - puzzle\n---\n\n\nBelow is my solution for Advent of Code 2022 day 2 in R.\n\n## The Brief\n\n> The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\n>\n> Rock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\n>\n> Appreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. \"The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column--\" Suddenly, the Elf is called away to help with someone's tent.\n\n## Part 1\n\n> The second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\n>\n> The winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\n>\n> Since you can't be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.\n>\n> For example, suppose you were given the following strategy guide:\n\n```\nA Y\nB X\nC Z\n```\n\n> This strategy guide predicts and recommends the following:\n>\n> - In the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\n> - In the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\n> - The third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.\n>\n> In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n>\n> What would your total score be if everything goes exactly according to your strategy guide?\n\n### Read Input\n\nAs always, the first step is to read the input. I have saved the example data in [test_input.txt](test_input.txt) and the real puzzle input in [input.txt](input.txt). I know that the input has two letters per line separated by a space, which is exactly what `read.delim()` is made for. I'll specify `header = FALSE` and `sep = \" \"`, and keep the default variable names `V1` and `V2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_input <- function(file) {\n  read.delim(file, header = FALSE, sep = \" \")\n}\n```\n:::\n\n\nJust to see what the test data looks like:\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- read_input(\"test_input.txt\")\ntest_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2\n1  A  Y\n2  B  X\n3  C  Z\n```\n:::\n:::\n\n\n### Scoring Function\n\nWe need to create a function that will determine our total score based on what shape we played and what the outcome was. Remember for the first column, A is Rock, B is Paper, and C is Scissors. For the second column, X is Rock, Y is Paper, and Z is scissors. For the outcomes, you get 0 points for losing, 3 for drawing, and 6 for winning.\n\nFirst, we have to determine the outcome. Unfortunately, this is somewhat tedious but the most straightforward way is to code it by hand.\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_outcome <- function(p1, p2) {\n  if (p1 == \"A\") {\n    if (p2 == \"X\") return(3) # Rock-Rock=Draw\n    if (p2 == \"Y\") return(6) # Rock-Paper=Win\n    if (p2 == \"Z\") return(0) # Rock-Scissors=Lose\n  }\n  if (p1 == \"B\") {\n    if (p2 == \"X\") return(0) # Paper-Rock=Lose\n    if (p2 == \"Y\") return(3) # Paper-Paper=Draw\n    if (p2 == \"Z\") return(6) # Paper-Scissors=Win\n  }\n  if (p1 == \"C\") {\n    if (p2 == \"X\") return(6) # Scissors-Rock=Win\n    if (p2 == \"Y\") return(0) # Scissors-Paper=Lose\n    if (p2 == \"Z\") return(3) # Scissors-Scissors=Draw\n  }\n}\n```\n:::\n\n\nWe can create a simple vector for points based on shape selection. You get 1 point for Rock (`\"X\"`), 2 points for Paper (`\"Y\"`), and 3 points for Scissors (`\"Z\"`). So I can make a vector of those shapes and pull out the scores using `which()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_shape_score <- function(shape) {\n  shape_scores <- c(\"X\", \"Y\", \"Z\")\n  which(shape_scores == shape)\n}\n```\n:::\n\n\nFinally, we need to combine those to get the total score.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_total_score <- function(p1, p2) {\n  outcome <- find_outcome(p1, p2)\n  shape_score <- find_shape_score(p2)\n  outcome + shape_score\n}\n```\n:::\n\n\nLet's apply that to the example data. I will add a column to the `test_data` data frame with the expected results from the example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data$expected <- c(8, 1, 6)\n```\n:::\n\n\nThen we can add a column with the calculated scores. Because I haven't written the functions to work with vectors of inputs, I iterate over the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_len(nrow(test_data))) {\n  test_data$calculated[i] <- find_total_score(test_data$V1[i], test_data$V2[i])\n}\ntest_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 expected calculated\n1  A  Y        8          8\n2  B  X        1          1\n3  C  Z        6          6\n```\n:::\n:::\n\nAnd in code, we can see:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall(test_data$expected == test_data$calculated)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\nI'll just put that into a function to re-use for the real data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_all_scores <- function(input_data) {\n  calculated <- numeric(nrow(input_data))\n  for (i in seq_len(nrow(input_data))) {\n    calculated[i] <- find_total_score(input_data$V1[i], input_data$V2[i])\n  }\n  calculated\n}\n```\n:::\n\n\nSo the last part is getting the sum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_1 <- function(input_data) {\n  calculated <- calculate_all_scores(input_data)\n  sum(calculated)\n}\n```\n:::\n\n\nTry it with the test data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_1(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n\nWhich is what we expect.\n\nNow we try it on the real data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreal_data <- read_input(\"input.txt\")\npart_1(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12855\n```\n:::\n:::\n\n\nAnd that's correct!\n\n## Part 2\n\n> The Elf finishes helping with the tent and sneaks back over to you. \"Anyway, the second column says how the round needs to end: X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win. Good luck!\"\n>\n> The total score is still calculated in the same way, but now you need to figure out what shape to choose so the round ends as indicated. The example above now goes like this:\n>\n> - In the first round, your opponent will choose Rock (A), and you need the round to end in a draw (Y), so you also choose Rock. This gives you a score of 1 + 3 = 4.\n> - In the second round, your opponent will choose Paper (B), and you choose Rock so you lose (X) with a score of 1 + 0 = 1.\n> - In the third round, you will defeat your opponent's Scissors with Rock for a score of 1 + 6 = 7.\n>\n> Now that you're correctly decrypting the ultra top secret strategy guide, you would get a total score of 12.\n> \n> Following the Elf's instructions for the second column, what would your total score be if everything goes exactly according to your strategy guide?\n\nSo now, instead of finding the outcome from each player's shape, we need to find the right shape to play based on the outcome. `\"X\"` means lose, `\"Y\"` means draw, and `\"Z\"` means win.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_correct_shape <- function(p1, outcome) {\n  if (p1 == \"A\") {\n    if (outcome == \"X\") return(\"scissors\") # Rock+Lose=Scissors\n    if (outcome == \"Y\") return(\"rock\")     # Rock+Draw=Rock\n    if (outcome == \"Z\") return(\"paper\")    # Rock+Win=Paper\n  }\n  if (p1 == \"B\") {\n    if (outcome == \"X\") return(\"rock\")     # Paper+Lose=Rock\n    if (outcome == \"Y\") return(\"paper\")    # Paper+Draw=Paper\n    if (outcome == \"Z\") return(\"scissors\") # Paper+Win=Scissors\n  }\n  if (p1 == \"C\") {\n    if (outcome == \"X\") return(\"paper\")    # Scissors+Lose=Paper\n    if (outcome == \"Y\") return(\"scissors\") # Scissors+Draw=Scissors\n    if (outcome == \"Z\") return(\"rock\")     # Scissors+Win=Rock\n  }\n}\n```\n:::\n\n\nI'll make a new `find_shape_score()` function using the actual shape names:\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_shape_score <- function(shape) {\n  shape_scores <- c(\"rock\", \"paper\", \"scissors\")\n  which(shape_scores == shape)\n}\n```\n:::\n\n\nI also need to make a lookup for outcome points. I could write this into the bigger functions but I'll make it its own just to be super clear about what's going on.\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_outcome_score <- function(outcome) {\n  if (outcome == \"X\") return(0)\n  if (outcome == \"Y\") return(3)\n  if (outcome == \"Z\") return(6)\n}\n```\n:::\n\n\nI need to make a new `find_total_score()` function as well:\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_total_score <- function(p1, outcome) {\n  correct_shape <- find_correct_shape(p1, outcome)\n  shape_score <- find_shape_score(correct_shape)\n  outcome_score <- find_outcome_score(outcome)\n  shape_score + outcome_score\n}\n```\n:::\n\n\nI'll test this out again on the test data. I read it in one more time just to get a clean slate since I added some extra columns in part 1. I can still use the same `calculate_all_scores()` function because I kept the same names for the intermediate functions, and that function just applies `find_total_score()` to the rows of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- read_input(\"test_input.txt\")\ntest_data$expected <- c(4, 1, 7)\ntest_data$calculated <- calculate_all_scores(test_data)\ntest_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 expected calculated\n1  A  Y        4          4\n2  B  X        1          1\n3  C  Z        7          7\n```\n:::\n:::\n\nLooks good! Now we just come up with the total:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(test_data$calculated)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\nWhich matches the example. Now for the real data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_2 <- function(input_data) {\n  calculated <- calculate_all_scores(input_data)\n  sum(calculated)\n}\npart_2(real_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13726\n```\n:::\n:::\n\n\nWhich is right! There we go.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}