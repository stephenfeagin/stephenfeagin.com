getOption("download.file.method")
library(fs)
library(stringr)
install.packages("reticulate")
as.character(9001)
as.character(9009)
rev(as.character(9001))
rev(as.character(9009))
rev(as.character(9001))
rev(str.split(as.character(9009)))
rev(strsplit(as.character(9009)))
rev(strsplit(as.character(9009), ""))
rev(strsplit(as.character(9009), ""))[[1]]
rev(strsplit(as.character(9009), ""))[[1]] == c("9", "0", "0", "9")
num_as_char <- "9009"
reversed <- rev(strsplit(num_as_char, ""))[[1]]
reversed
all(reversed == strsplit(num_as_char, "")[[1]])
?prod
all_combos <- expand.grid(101:999, 101:999)
all_combos
all_combos <- expand.grid(1:99, 1:99)
all_combos
99*99
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
rolls <- read_excel(
"all-rolls.xlsx",
sheet = "All Episodes",
skip = 1,
col_names = c(
"episode",
"time",
"character",
"type_of_roll",
"total_value",
"natural_value",
"crit",
"damage",
"num_kills",
"notes"
),
col_types = "text"
)
unique(rolls$natural_value)
na_values <- c(
"Unknown", "unknown", "Unkown", "Uknown", "--"
)
na_values <- c(
"Unknown", "unknown", "Unkown", "Uknown", "--"
)
rolls <- rolls |>
filter(natural_value %in% na_values) |>
mutate(natural_value = NA)
unique(rolls$natural_value)
rolls$natural_value
rolls <- read_excel(
"all-rolls.xlsx",
sheet = "All Episodes",
skip = 1,
col_names = c(
"episode",
"time",
"character",
"type_of_roll",
"total_value",
"natural_value",
"crit",
"damage",
"num_kills",
"notes"
),
col_types = "text"
)
na_values <- c(
"Unknown", "unknown", "Unkown", "Uknown", "--"
)
rolls$natural_value[rolls$natural_value %in% na_values] <- NA
unique(rolls$natural_value)
rolls <- read_excel(
"all-rolls.xlsx",
sheet = "All Episodes",
skip = 1,
col_names = c(
"episode",
"time",
"character",
"type_of_roll",
"total_value",
"natural_value",
"crit",
"damage",
"num_kills",
"notes"
),
col_types = "text"
)
unique(rolls$natural_value)
na_values <- c(
"Unknown", "unknown", "Unkown", "Uknown", "--"
)
rolls <- rolls |>
filter(natural_value %in% na_values) |>
filter(is.na(natural_value))
unique(rolls$natural_value)
rolls$natural_value
rolls <- read_excel(
"all-rolls.xlsx",
sheet = "All Episodes",
skip = 1,
col_names = c(
"episode",
"time",
"character",
"type_of_roll",
"total_value",
"natural_value",
"crit",
"damage",
"num_kills",
"notes"
),
col_types = "text"
)
unique(rolls$natural_value)
na_values <- c(
"Unknown", "unknown", "Unkown", "Uknown", "--"
)
rolls <- rolls |>
filter(!(natural_value %in% na_values)) |>
filter(!is.na(natural_value))
unique(rolls$natural_value)
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
rolls <- read_excel(
"all-rolls.xlsx",
sheet = "All Episodes",
skip = 1,
col_names = c(
"episode",
"time",
"character",
"type_of_roll",
"total_value",
"natural_value",
"crit",
"damage",
"num_kills",
"notes"
),
col_types = "text"
)
unique(rolls$natural_value)
na_values <- c(
"Unknown", "unknown", "Unkown", "Uknown", "--"
)
rolls <- rolls |>
filter(!(natural_value %in% na_values)) |>
filter(!is.na(natural_value))
rolls <- filter(rolls, !is.na(type_of_roll))
non_d20 <- c(
"Beard",
"Beard Check",
"Cutting Words",
"d100",
"Damage",
"Divine Intervention",
"Inspiration",
"Missile Snare",
"Other",
"Spell Effect",
"Trajectory"
)
rolls <- filter(rolls, !(type_of_roll %in% non_d20))
rolls$episode[rolls$episode %in% c("31 p1", "31 p2")] <- 31
rolls$episode[rolls$episode %in% c("33 p1", "33 p2")] <- 33
rolls$episode[rolls$episode %in% c("35 p1", "35 p2")] <- 35
rolls$episode <- as.integer(rolls$episode)
crits <-
rolls |>
mutate(natural_value = as.numeric(natural_value)) |>
group_by(episode) |>
summarize(
n_rolls = n(),
nat_20 = sum(natural_value == 20),
nat_1 = sum(natural_value == 1)
) |>
mutate(nat_20_prop = nat_20 / n_rolls,
nat_1_prop = nat_1 / n_rolls)
episodes <- tibble(
label = c(
"Fewest Natural 1s",
"Lowest Natural 1 Proportion",
"Most Natural 1s",
"Highest Natural 1 Proportion",
"Fewest Natural 20s",
"Lowest Natural 20 Proportion",
"Most Natural 20s",
"Highest Natural 20 Proportion"
)
)
episodes[, c("episode",
"n_rolls",
"nat_1",
"nat_1_prop",
"nat_20",
"nat_20_prop")] <-  crits[c(
which.min(crits$nat_1),
which.min(crits$nat_1_prop),
which.max(crits$nat_1),
which.max(crits$nat_1_prop),
which.min(crits$nat_20),
which.min(crits$nat_20_prop),
which.max(crits$nat_20),
which.max(crits$nat_20_prop)
),
c("episode",
"n_rolls",
"nat_1",
"nat_1_prop",
"nat_20",
"nat_20_prop")]
episodes
episodes <- tibble(
label = c(
"Fewest Natural 1s",
"Lowest Natural 1 Proportion",
"Most Natural 1s",
"Highest Natural 1 Proportion",
"Fewest Natural 20s",
"Lowest Natural 20 Proportion",
"Most Natural 20s",
"Highest Natural 20 Proportion"
)
)
episodes
crits |> group_by(episode) |> slice_min(nat_1)
crits |> group_by(episode) |> slice_min(nat_1)
crits |> group_by(episode) |> slice_min(nat_1, n = 1)
crits |> group_by(episode) |> slice_min(nat_1, n = 1)
crits |> slice_min(nat_1, n = 1)
crits |> slice_min(nat_1, n = 1, with_ties = FALSE)
episodes <- tibble(
label = c(
"Fewest Natural 1s",
"Lowest Natural 1 Proportion",
"Most Natural 1s",
"Highest Natural 1 Proportion",
"Fewest Natural 20s",
"Lowest Natural 20 Proportion",
"Most Natural 20s",
"Highest Natural 20 Proportion"
)
)
crits |>
slice_min(nat_1, n = 1) |>
select(episode, n_rolls, nat_1)
no_nat_20s <- crits |>
slice_min(nat_20, n = 1) |>
select(episode, n_rolls, nat_20)
crits |>
slice_min(nat_1_prop, n = 1) |>
union(crits |>
slice_min(nat_20_prop, n = 1))
crits |>
filter(nat_1 > 0) |>
slice_min(nat_1_prop, n = 1) |>
union(crits |>
filter(nat_20 > 0) |>
slice_min(nat_20_prop, n = 1))
crits |>
slice_max(nat_1, n = 1) |>
union(slice_max(crits, nat_20, n = 1)) |>
union(slice_max(crits, nat_1_prop, n = 1)) |>
union(slice_max(crits, nat_20_prop, n = 1))
library(ggplot2)
ggplot(crits, aes(x = nat_1)) +
geom_bar() +
theme_bw()
ggplot(crits, aes(x = episode, y = nat_1)) +
geom_bar() +
theme_bw()
ggplot(crits, aes(x = episode, y = nat_1)) +
geom_point() +
theme_bw()
ggplot(crits, aes(x = episode, y = nat_1)) +
geom_line() +
theme_bw()
ggplot(crits, aes(x = episode, y = nat_1)) +
geom_line() +
labs(x = "Episode Number", y = "Natural 1s")
ggplot(crits, aes(x = episode, y = nat_1)) +
geom_line() +
labs(x = "Episode Number", y = "Natural 1s") +
theme_bw()
ggplot(crits, aes(x = episode, y = nat_20)) +
geom_line() +
labs(x = "Episode Number", y = "Natural 20s") +
theme_bw()
ggplot(crits, aes(x = episode, y = nat_1_prop)) +
geom_line() +
labs(x = "Episode Number", y = "Proportion Natural 1s") +
theme_bw()
ggplot(crits, aes(x = episode, y = nat_20_prop)) +
geom_line() +
labs(x = "Episode Number", y = "Proportion Natural 20s") +
theme_bw()
ggplot(crits, aes(x = episode, y = n_roll)) +
geom_line()
ggplot(crits, aes(x = episode, y = n_rolls)) +
geom_line()
ggplot(crits, aes(x = episode, y = n_rolls)) +
geom_line() +
labs(x = "Episode Number", y = "Total Rolls") +
theme_bw()
ggplot(crits, aes(x = n_rolls)) +
geom_bar() +
theme_bw()
ggplot(crits, aes(x = n_rolls)) +
geom_bar(width = 0.5) +
theme_bw()
ggplot(crits, aes(x = n_rolls)) +
geom_bar(width = 1.5) +
theme_bw()
ggplot(crits, aes(x = n_rolls)) +
geom_bar() +
theme_bw()
mean(crits$n_rolls)
ggplot(crits, aes(x = n_rolls)) +
geom_bar() +
geom_vline(xintercept = mean(crits$n_rolls)) +
theme_bw()
ggplot(crits, aes(x = n_rolls)) +
geom_bar() +
geom_vline(xintercept = mean(crits$n_rolls), width = 2) +
theme_bw()
ggplot(crits, aes(x = n_rolls)) +
geom_bar() +
geom_vline(xintercept = mean(crits$n_rolls), size = 2) +
theme_bw()
?geom_vline
ggplot(crits, aes(x = n_rolls)) +
geom_bar() +
geom_vline(xintercept = mean(crits$n_rolls), size = 1.5, color = "red") +
theme_bw()
