{"title":"Project Euler: Even Fibonacci Numbers","markdown":{"yaml":{"title":"Project Euler: Even Fibonacci Numbers","description":"Find the sum of even Fibonacci numbers less than 4 million.","date":"2022-10-05","author":"Stephen Feagin","draft":false,"series":null,"categories":["go","r","python","project euler","puzzle"]},"headingText":"Solution","containsRefs":false,"markdown":"\n\nOnward to Project Euler problem 2: Even Fibonacci Numbers. The brief reads:\n\n> Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n>\n> $$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...$$\n>\n> By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\nMy approach is the same across all three languages. Starting after the first two values in the sequence, keep track of the running sum and the most recent two values. Calculate the next term in the series by adding the previous two. While the new term is less than 4 million, check if it's even. If it is, add it to the running total. Update the last two terms and calculate the next term, then run through the loop again.\n\n### R\n\n```{r}\n# Keep track of the most recent two terms\nlast_two <- c(1, 2)\n# Running total sum\n# Start with 2 because it's already in the first two terms\ntotal <- 2\n# Get the next term in the sequence\nnext_term <- sum(last_two)\nwhile (next_term < 4e6) {\n    if (next_term %% 2 == 0) {\n        total <- total + next_term\n    }\n    last_two <- c(last_two[2], next_term)\n    next_term <- sum(last_two)\n}\ntotal\n```\n\n### Python\n\n```{python}\n# Start with the first two terms\n# The sum of the even numbers is already 2\ntotal = 2\n# Keep track of the most recent two numbers\nlast_two = [1, 2]\n# Get the next term in the sequence, the sum of the previous two terms\nnext_term = sum(last_two)\nwhile next_term < 4000000:\n    # If the new term is even, add it to the running total\n    if next_term % 2 == 0:\n        total += next_term\n    # Update the last_two list\n    last_two = [last_two[1], next_term]\n    next_term = sum(last_two)\nprint(total)\n```\n\n### Go\n\n``` go\n// Keep track of the running total, starting with two because we start looping\n// after the first two terms\ntotal := 2\n// Keep track of the previous two values\nlastTwo := []int{1, 2}\n// Get the next term in the sequence by adding the previous two\nnextTerm := lastTwo[0] + lastTwo[1]\nfor nextTerm < 4000000 {\n    // If the new term is even, add it to the running total\n    if nextTerm%2 == 0 {\n        total += nextTerm\n    }\n\n    // Update the lastTwo slice\n    lastTwo = []int{lastTwo[1], nextTerm}\n\n    // Update the nextTerm value\n    nextTerm = lastTwo[0] + lastTwo[1]\n}\nfmt.Println(total)\n```\n\nSee all of my Project Euler solutions on [GitHub](https://github.com/stephenfeagin/projecteuler).\n","srcMarkdownNoYaml":"\n\nOnward to Project Euler problem 2: Even Fibonacci Numbers. The brief reads:\n\n> Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n>\n> $$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...$$\n>\n> By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n## Solution\n\nMy approach is the same across all three languages. Starting after the first two values in the sequence, keep track of the running sum and the most recent two values. Calculate the next term in the series by adding the previous two. While the new term is less than 4 million, check if it's even. If it is, add it to the running total. Update the last two terms and calculate the next term, then run through the loop again.\n\n### R\n\n```{r}\n# Keep track of the most recent two terms\nlast_two <- c(1, 2)\n# Running total sum\n# Start with 2 because it's already in the first two terms\ntotal <- 2\n# Get the next term in the sequence\nnext_term <- sum(last_two)\nwhile (next_term < 4e6) {\n    if (next_term %% 2 == 0) {\n        total <- total + next_term\n    }\n    last_two <- c(last_two[2], next_term)\n    next_term <- sum(last_two)\n}\ntotal\n```\n\n### Python\n\n```{python}\n# Start with the first two terms\n# The sum of the even numbers is already 2\ntotal = 2\n# Keep track of the most recent two numbers\nlast_two = [1, 2]\n# Get the next term in the sequence, the sum of the previous two terms\nnext_term = sum(last_two)\nwhile next_term < 4000000:\n    # If the new term is even, add it to the running total\n    if next_term % 2 == 0:\n        total += next_term\n    # Update the last_two list\n    last_two = [last_two[1], next_term]\n    next_term = sum(last_two)\nprint(total)\n```\n\n### Go\n\n``` go\n// Keep track of the running total, starting with two because we start looping\n// after the first two terms\ntotal := 2\n// Keep track of the previous two values\nlastTwo := []int{1, 2}\n// Get the next term in the sequence by adding the previous two\nnextTerm := lastTwo[0] + lastTwo[1]\nfor nextTerm < 4000000 {\n    // If the new term is even, add it to the running total\n    if nextTerm%2 == 0 {\n        total += nextTerm\n    }\n\n    // Update the lastTwo slice\n    lastTwo = []int{lastTwo[1], nextTerm}\n\n    // Update the nextTerm value\n    nextTerm = lastTwo[0] + lastTwo[1]\n}\nfmt.Println(total)\n```\n\nSee all of my Project Euler solutions on [GitHub](https://github.com/stephenfeagin/projecteuler).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"cosmo","title-block-banner":false,"title":"Project Euler: Even Fibonacci Numbers","description":"Find the sum of even Fibonacci numbers less than 4 million.","date":"2022-10-05","author":"Stephen Feagin","draft":false,"series":null,"categories":["go","r","python","project euler","puzzle"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}