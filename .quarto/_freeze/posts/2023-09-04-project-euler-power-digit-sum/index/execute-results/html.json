{
  "hash": "fe3f4612577374896b8011c53972cadb",
  "result": {
    "markdown": "---\ntitle: \"Project Euler: Power Digit Sum\"\ndescription: \"Find the sum of the digits\"\ndate: 2023-09-04\nauthor: \"Stephen Feagin\"\ndraft: false\ncategories:\n  - r\n  - project euler\n  - puzzle\n---\n\n\nProject Euler problem 16: Power Digit Sum. The brief reads:\n\n> $2^{15} = 32768$ and the sum of its digits are $3 + 2 + 7 + 6 + 8 = 26$\nWhat is the sum of the digits of the number $2^{1000}$?\n\n# Solution\n\n## R\n\nAn important hiccup for solving this in R is R's built in scientific notation representation. For a number as large as 2^1000, we need to disable scientific notation so that we actually get all of the digits. You do this by setting the `scipen` option, which applies a \"penalty\" to displaying scientific notation before a prescribed number of digits. You can also do this with the `scientific` argument of the `format()` function. We need to convert the integer to a character anyway, so using `format()` is fine for our purposes. We need to split the integer into its component digits, convert those back into numeric type, and then add them together. Note that for `strsplit()` we have to add `[[1]]` to get the result we want. This is because `strsplit()` can act on a vector of character strings, and returns a list of vectors of the component characters. In our case, the vector is length 1 but it still returns a list of length 1, so we need to specify that we want the first item in the list, rather than the whole list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum <- format(2^1000, scientific = FALSE)\ndigits_char <- strsplit(num, \"\")[[1]]\ndigits_num <- as.numeric(digits_char)\nsum(digits_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1366\n```\n:::\n:::\n\n\n## Python\n\nWe again have to suppress scientific notation, but in python we use the `.nf` notation for format strings.\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\nnum_char = format(math.pow(2, 1000), \".0f\")\ndigits_num = [int(x) for x in num_char]\nsum(digits_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1366\n```\n:::\n:::\n\n\n## Go\n\nAs I've mentioned before, Go has very little magic so you have to be very explicit and verbose in your code. In our case, that means iterating through slices and acting on each item individually rather than using vectorization (as in R) or list comprehension (as in python).\n\n```go\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// number as string\n\tnum := math.Pow(2, 1000)\n\tnumChar := fmt.Sprintf(\"%.0f\", num)\n\tdigitsChar := strings.Split(numChar, \"\")\n\tdigitsInt := make([]int, len(digitsChar))\n\tfor i := 0; i < len(digitsChar); i++ {\n\t\tdigitsInt[i], _ = strconv.Atoi(digitsChar[i])\n\t}\n\ttotal := 0\n\tfor i := 0; i < len(digitsInt); i++ {\n\t\ttotal += digitsInt[i]\n\t}\n\tfmt.Println(total)\n}\n```\n\nSee all of my Project Euler solutions on [GitHub](https://github.com/stephenfeagin/projecteuler).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}